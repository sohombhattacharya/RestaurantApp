{"version":3,"sources":["../src/MutableString.js"],"names":[],"mappings":";;;;;;;;;;;QAGO,SAAS;;wBACG,UAAU;;;;gCACH,yBAAyB;;;;AAEnD,IAAM,OAAO,GAAG,CACZ,EAAE,EACF,OAAO,EACP,IAAI,EACJ,SAAS,CACZ,CAAC;;AAEF,IAAI,CAAC,QAAQ,EAAE,YAAM;;;;;;AACjB,0CAAmB,OAAO,4GAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACjE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,YAAY,EAAE,YAAM;;;;;;AACrB,2CAAmB,OAAO,iHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,kCAAO,MAAM,CAAC,WAAU,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/E;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,QAAQ,EAAE,YAAM;;;;;;AACjB,2CAAmB,OAAO,iHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,yBAAa,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACtC,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;SAC5E;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,UAAU,EAAE,YAAM;;;;;;AACnB,2CAAmB,OAAO,iHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,kCAAO,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;SACzE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,UAAU,EAAE,YAAM;;;;;;AACnB,2CAAmB,OAAO,iHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,kCAAO,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;SACzE;;;;;;;;;;;;;;;;AAED,0BAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AACxC,0BAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,kCAAkB,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3D,0BAAO,MAAM,CAAC,kCAAkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;AAE3D,0BAAO,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;AAC3C,0BAAO,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,kCAAkB,OAAO,CAAC,CAAC,CAAC,CAAC;AAC9D,0BAAO,OAAO,CAAC,kCAAkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;CACjE,CAAC,CAAC;;AAEH,IAAI,CAAC,SAAS,EAAE,YAAM;;;;;;AAClB,2CAAmB,OAAO,iHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,kCAAO,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;SACvE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,aAAa,EAAE,YAAM;;;;;;AACtB,2CAAmB,OAAO,iHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,kCAAO,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;SAC/E;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,OAAO,EAAE,YAAM;;;;;;AAChB,2CAAmB,OAAO,iHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,kCAAO,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;SACnE;;;;;;;;;;;;;;;;AAED,0BAAO,SAAS,CACZ,QAAQ,CAAC,KAAK,CAAC,kCAAkB,KAAK,CAAC,CAAC,EACxC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CACxB,CAAC;;AAEF,0BAAO,SAAS,CACZ,kCAAkB,QAAQ,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EACxC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CACxB,CAAC;CACL,CAAC,CAAC;;AAEH,IAAI,CAAC,QAAQ,EAAE,YAAM;;;;;;AACjB,2CAAmB,OAAO,iHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,yBAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACxB,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9D;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,SAAS,EAAE,YAAM;;;;;;AAClB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,cAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,0BAAa,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAClC,kCAAO,WAAW,CAAC,cAAa,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;SACxE;;;;;;;;;;;;;;;;AAED,0BAAO,WAAW,CACd,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,EAC9B,QAAQ,CAAC,OAAO,CAAC,kCAAkB,KAAK,CAAC,EAAE,kCAAkB,KAAK,CAAC,CAAC,CACvE,CAAC;;AAEF,QAAM,aAAa,GAAG,kCAAkB,QAAQ,CAAC,CAAC;AAClD,iBAAa,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACpC,0BAAO,WAAW,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;CAC1D,CAAC,CAAC;;AAEH,IAAI,CAAC,QAAQ,EAAE,YAAM;;;;;;AACjB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACzE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,OAAO,EAAE,YAAM;;;;;;AAChB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,yBAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC5B,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SAClE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,OAAO,EAAE,YAAM;;;;;;AAChB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,kCAAO,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;SACnE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,YAAY,EAAE,YAAM;;;;;;AACrB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,kCAAO,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;SAC7E;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,QAAQ,EAAE,YAAM;;;;;;AACjB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,yBAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACjE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,WAAW,EAAE,YAAM;;;;;;AACpB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,yBAAa,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC9B,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACpE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,aAAa,EAAE,YAAM;;;;;;AACtB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,yBAAa,CAAC,WAAW,EAAE,CAAC;AAC5B,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;SAClE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,aAAa,EAAE,YAAM;;;;;;AACtB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,yBAAa,CAAC,WAAW,EAAE,CAAC;AAC5B,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;SAClE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,MAAM,EAAE,YAAM;;;;;;AACf,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,yBAAa,CAAC,IAAI,EAAE,CAAC;AACrB,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;SAC3D;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,UAAU,EAAE,YAAM;;;;;;AACnB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,yBAAa,CAAC,QAAQ,EAAE,CAAC;AACzB,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC/D;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,WAAW,EAAE,YAAM;;;;;;AACpB,4CAAmB,OAAO,sHAAE;gBAAnB,MAAM;;AACX,gBAAI,aAAa,GAAG,kCAAkB,MAAM,CAAC,CAAC;AAC9C,yBAAa,CAAC,SAAS,EAAE,CAAC;AAC1B,kCAAO,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;SAChE;;;;;;;;;;;;;;;CACJ,CAAC,CAAC;;AAEH,IAAI,CAAC,YAAY,EAAE,YAAM;AACrB,0BAAO,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AACzB,0BAAO,MAAM,CAAC,GAAG,GAAG,kCAAkB,GAAG,CAAC,CAAC,CAAC;AAC5C,0BAAO,MAAM,CAAC,kCAAkB,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;;AAE5C,0BAAO,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AAC1B,0BAAO,OAAO,CAAC,GAAG,GAAG,kCAAkB,GAAG,CAAC,CAAC,CAAC;AAC7C,0BAAO,OAAO,CAAC,kCAAkB,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;;AAE7C,0BAAO,WAAW,CAAC,kCAAkB,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC;AAC5D,0BAAO,WAAW,CAAC,GAAG,GAAG,kCAAkB,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC;CAC/D,CAAC,CAAC;;AAEH,IAAI,CAAC,UAAU,EAAE,YAAM;AACnB,QAAM,OAAO,GAAG,EAAE,CAAC;AACnB,QAAM,aAAa,GAAG,kCAAkB,KAAK,CAAC,CAAC;;;;;;;AAE/C,4CAAmB,aAAa,sHAAE;gBAAzB,MAAM;;AACX,mBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACxB;;;;;;;;;;;;;;;;AAED,0BAAO,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACtC,0BAAO,SAAS,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;CAC9C,CAAC,CAAC","file":"MutableString.js","sourcesContent":["/* global suite, test */\n/* eslint yoda:0 */\n\nimport 'core-js';\nimport assert from 'proclaim';\nimport MutableString from '../../lib/MutableString';\n\nconst strings = [\n    '',\n    'hello',\n    '\\n',\n    'Hello\\n',\n];\n\ntest('charAt', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        assert.strictEqual(mutableString.charAt(0), string.charAt(0));\n    }\n});\n\ntest('charCodeAt', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        assert.isTrue(Object.is(mutableString.charCodeAt(0), string.charCodeAt(0)));\n    }\n});\n\ntest('concat', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.concat('test', 'test2');\n        assert.strictEqual(mutableString.string, string.concat('test', 'test2'));\n    }\n});\n\ntest('endsWith', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        assert.strictEqual(mutableString.endsWith('o'), string.endsWith('o'));\n    }\n});\n\ntest('includes', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        assert.strictEqual(mutableString.includes('l'), string.includes('l'));\n    }\n\n    assert.isTrue('foobar'.includes('bar'));\n    assert.isTrue('foobar'.includes(new MutableString('bar')));\n    assert.isTrue(new MutableString('foobar').includes('bar'));\n\n    assert.isFalse('foobar'.includes('foooo'));\n    assert.isFalse('foobar'.includes(new MutableString('foooo')));\n    assert.isFalse(new MutableString('foobar').includes('foooo'));\n});\n\ntest('indexOf', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        assert.strictEqual(mutableString.indexOf('h'), string.indexOf('h'));\n    }\n});\n\ntest('lastIndexOf', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        assert.strictEqual(mutableString.lastIndexOf('l'), string.lastIndexOf('l'));\n    }\n});\n\ntest('match', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        assert.deepEqual(mutableString.match(/lo/), string.match(/lo/));\n    }\n\n    assert.deepEqual(\n        'foobar'.match(new MutableString('foo')),\n        'foobar'.match('foo')\n    );\n\n    assert.deepEqual(\n        new MutableString('foobar').match('foo'),\n        'foobar'.match('foo')\n    );\n});\n\ntest('repeat', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.repeat(5);\n        assert.strictEqual(mutableString.string, string.repeat(5));\n    }\n});\n\ntest('replace', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.replace('l', 'lll');\n        assert.strictEqual(mutableString.string, string.replace('l', 'lll'));\n    }\n\n    assert.strictEqual(\n        'foobar'.replace('bar', 'foo'),\n        'foobar'.replace(new MutableString('bar'), new MutableString('foo'))\n    );\n\n    const mutableString = new MutableString('foobar');\n    mutableString.replace('bar', 'foo');\n    assert.strictEqual(mutableString.toString(), 'foofoo');\n});\n\ntest('search', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        assert.strictEqual(mutableString.search(/\\s+/), string.search(/\\s+/));\n    }\n});\n\ntest('slice', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.slice(-3, -1);\n        assert.strictEqual(mutableString.string, string.slice(-3, -1));\n    }\n});\n\ntest('split', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        assert.deepEqual(mutableString.split('\\n'), string.split('\\n'));\n    }\n});\n\ntest('startsWith', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        assert.strictEqual(mutableString.startsWith('h'), string.startsWith('h'));\n    }\n});\n\ntest('substr', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.substr(0, 1);\n        assert.strictEqual(mutableString.string, string.substr(0, 1));\n    }\n});\n\ntest('substring', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.substring(0, 1);\n        assert.strictEqual(mutableString.string, string.substring(0, 1));\n    }\n});\n\ntest('toLowerCase', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.toLowerCase();\n        assert.strictEqual(mutableString.string, string.toLowerCase());\n    }\n});\n\ntest('toUpperCase', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.toUpperCase();\n        assert.strictEqual(mutableString.string, string.toUpperCase());\n    }\n});\n\ntest('trim', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.trim();\n        assert.strictEqual(mutableString.string, string.trim());\n    }\n});\n\ntest('trimLeft', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.trimLeft();\n        assert.strictEqual(mutableString.string, string.trimLeft());\n    }\n});\n\ntest('trimRight', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.trimRight();\n        assert.strictEqual(mutableString.string, string.trimRight());\n    }\n});\n\ntest('operations', () => {\n    assert.isTrue('a' < 'b');\n    assert.isTrue('a' < new MutableString('b'));\n    assert.isTrue(new MutableString('a') < 'b');\n\n    assert.isFalse('a' > 'b');\n    assert.isFalse('a' > new MutableString('b'));\n    assert.isFalse(new MutableString('a') > 'b');\n\n    assert.strictEqual(new MutableString('a') + 'b', 'a' + 'b');\n    assert.strictEqual('a' + new MutableString('b'), 'a' + 'b');\n});\n\ntest('iterator', () => {\n    const letters = [];\n    const mutableString = new MutableString('abc');\n\n    for (let letter of mutableString) {\n        letters.push(letter);\n    }\n\n    assert.strictEqual(letters.length, 3);\n    assert.deepEqual(letters, ['a', 'b', 'c']);\n});\n"]}